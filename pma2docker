#!/bin/bash

# Supported Program Modes
NOT_INITIALIZED_MODE="-1"
INFO_MODE="0"
NORMAL_MODE="1"
SOURCE_MODE="2"
TARGET_MODE="4"


PGM_MODE="$NOT_INITIALIZED_MODE"
NON_FLAG_CNT=2
PGM_SETBY=""
PARM_CNT="$#"
VERSION=1.3.0
ONLY_SINGLE_IMAGES=0
ONLY_PULL_SPLIT=0
SOURCE_IMAGE=""
TARGET_IMAGE=""
SOURCE_SERVER=""
SOURCE_USER=""
SOURCE_PASSWORD=""
TARGET_SERVER=""
TARGET_USER=""
TARGET_PASSWORD=""
LIST_OF_PLATFORM_IMAGES=""
LIST_OF_ARCHS=""
NR_OF_MANIFESTS=""
EXTRACT_PATH=""
CLEANUP=0
DEL_IMAGES=""
DEL_MANIFESTS=""
ARR_SI_TYPE=()
ARR_SI_PATH=()
ARR_SI_ARCH=()


function usage(){
  echo "Usage: pma2docker [options] <SOURCE_IMAGE> <TARGET_IMAGE>"
  echo " "
  echo "Options:"
  echo "  -a, --only-arch           - Split source multi-arch image and keep only specific arch (split multiple arch with comma: amd64,arm64)"
  echo "  -c, --cleanup             - Delete the specified and created docker images from your local disk."
  echo "  -s, --only-single-images  - Push only the single images with suffix, e.g. *-amd64, *-arm64, *-armv7"
  echo "      --source-user         - Username for Login at Source Repository"
  echo "      --source-password     - Password for Login at Source Repository"
  echo "      --target-user         - Username for Login at Target Repository"
  echo "      --target-password     - Password for Login at Target Repository"
  echo " "
  echo " "
  echo "Usage: pma2docker [options] <SOURCE_IMAGE>"
  echo " "
  echo "Options:"
  echo "  -a, --only-arch           - Split source multi-arch image and keep only specific arch (split multiple arch with comma: amd64,arm64)"
  echo "  -c, --cleanup             - Delete the specified and created docker images from your local disk."
  echo "  -e, --extract             - Save Source Image to a file"
  echo "  -p, --pull-split          - Only download the image from Source Repository and add suffix without pushing it somewhere"
  echo "      --source-user         - Username for Login at Source Repository"
  echo "      --source-password     - Password for Login at Source Repository"
  echo " "
  echo " "
  echo "Usage: pma2docker [options] <TARGET_IMAGE>"
  echo " "
  echo "Options:"
  echo "  -c, --cleanup             - Delete the specified and created docker images from your local disk."
  echo "  -m, --merge-push          - Load one or more single images you would like to combine to a multiarch image and push it. You can specify multiple single image references:"
  echo '                              Use this form: --merge-push "type=(oci|image),path=<(repository_path>|<path_to_tar.gz>),arch=<arch_of_single-image>"'
  echo "      --target-user         - Username for Login at Target Repository"
  echo "      --target-password     - Password for Login at Target Repository"
  echo " "
  echo " "
  echo "Usage: pma2docker <version|help>"
  echo " "
  echo "List additional information abaout this tool"
}

function version(){
  echo "pma2docker v.$VERSION"
}

function setPgmMode(){
  local requestedMode=$1

  # Callers can pass parameter which can be used by multiple modes of Normal- / Source- / Target- Mode. Passing a combination mode will not change the specified mode settings
  if [[ "$requestedMode" == $(("$NORMAL_MODE"+"$SOURCE_MODE")) ]] && [[ "$requestedMode" -ne "$TARGET_MODE" ]]; then
    if [[ $cnt -gt $(( "$PARM_CNT" - $NON_FLAG_CNT )) ]]; then
      PGM_MODE="$SOURCE_MODE"
      PGM_SETBY="$arg"
      NON_FLAG_CNT=1
    else
      PGM_MODE="$PGM_MODE"
      PGM_SETBY="$PGM_SETBY"
      NON_FLAG_CNT="$NON_FLAG_CNT"
    fi;
    return 0
  elif [[ "$requestedMode" == $(("$NORMAL_MODE"+"$TARGET_MODE")) ]] && [[ "$requestedMode" -ne "$SOURCE_MODE" ]]; then
    if [[ $cnt -gt $(( "$PARM_CNT" - $NON_FLAG_CNT )) ]]; then
      PGM_MODE="$TARGET_MODE"
      PGM_SETBY="$arg"
      NON_FLAG_CNT=1
    else
      PGM_MODE="$PGM_MODE"
      PGM_SETBY="$PGM_SETBY"
      NON_FLAG_CNT="$NON_FLAG_CNT"
    fi;
    return 0
  elif [[ "$requestedMode" == $(("$NORMAL_MODE"+"$SOURCE_MODE"+"$TARGET_MODE")) ]]; then
    PGM_MODE="$PGM_MODE"
    PGM_SETBY="$PGM_SETBY"
    NON_FLAG_CNT="$NON_FLAG_CNT"
    return 0
  fi

  if [[ $PGM_MODE -ne $1 ]] && [[ $NOT_INITIALIZED_MODE -ne "-1" ]]; then
    echo "ERROR: Invalid parameter combination. '""$arg""' is not compatible with '""$PGM_SETBY""'"
    exit 1
  fi
  if   [[ "$requestedMode" == "$INFO_MODE" ]]; then
    PGM_MODE="$INFO_MODE"
    PGM_SETBY="$arg"
    NON_FLAG_CNT=0
  elif [[ "$requestedMode" == "$NORMAL_MODE" ]]; then
    PGM_MODE="$NORMAL_MODE"
    PGM_SETBY="$arg"
    NON_FLAG_CNT=2
  elif [[ "$requestedMode" == "$SOURCE_MODE" ]]; then
    PGM_MODE="$SOURCE_MODE"
    PGM_SETBY="$arg"
    NON_FLAG_CNT=1
  elif [[ "$requestedMode" == "$TARGET_MODE" ]]; then
    PGM_MODE="$TARGET_MODE"
    PGM_SETBY="$arg"
    NON_FLAG_CNT=1
  else
    echo "ERROR: Illegal Mode selected by unknown problem. Abort..."
    exit 1
  fi
  return 0
}

function dependencyCheck(){
  # Check installed tools: bash, jq, docker
  bash --version > /dev/null 2>&1   || { echo "ERROR: Dependency 'bash' is not installed. Please make sure that 'bash' ist installed and configured properly"; exit 1; }
  jq --version > /dev/null 2>&1     || { echo "ERROR: Dependency 'jq' is not installed. Please make sure that 'jq' ist installed and configured properly"; exit 1; }
  docker --version > /dev/null 2>&1 || { echo "ERROR: Dependency 'docker' is not installed. Please make sure that 'docker' ist installed and configured properly"; exit 1; }

  # Check if command docker manifest is available
  [ $(docker manifest --help | grep "docker manifest COMMAND --help" | wc -l) -ge "1" ] || { echo "It loooks like there is noch command 'docker manifest' available on the system. Please verify, if you can run 'docker manifest --help' successfully on the system. You may need to enable docker's experimental client features!"; exit 1; }

  # Check if command docker buildx is available
  docker_server_start=$(docker info | grep -En "^Server" | cut -d':' -f1)
  client_plugins=$(docker info | head -n $(( $docker_server_start - 2)) | grep -A 100 'Plugins' | grep -v "Plugins" | awk '{ print; $1 }' | tr -d ' ' | cut -d':' -f1)

  BUILDX_ENABLED="0"
  for plugin in $client_plugins
  do
    if [[ "$plugin" = "buildx" ]]; then
      BUILDX_ENABLED="1"
    fi
  done;

  if [[ "$BUILDX_ENABLED" = "0" ]]; then
    echo "ERROR: Docker Plugin 'buildx' is needed to create multiarchitectural images. You can find neccessary information here: https://docs.docker.com/buildx/working-with-buildx/"
    exit 1
  fi
}

function validateArch(){
  local IFS=$','
  local match="0"

  for a in $LIST_OF_ARCHS;
  do
    if [[ $a    == "linux/amd64"    ]]; then a="amd64"   ; fi;
    if [[ $a    == "linux/arm/v5"   ]]; then a="armv5"   ; fi;
    if [[ $a    == "linux/arm/v7"   ]]; then a="armv7"   ; fi;
    if [[ $a    == "linux/arm64/v8" ]]; then a="arm64"   ; fi;
    if [[ $a    == "linux/386"      ]]; then a="i386"    ; fi;
    if [[ $a    == "linux/mips64le" ]]; then a="mips64le"; fi;
    if [[ $a    == "linux/ppc64le"  ]]; then a="ppc64le" ; fi;
    if [[ $a    == "linux/riscv64"  ]]; then a="riscv64" ; fi;
    if [[ $a    == "linux/s390x"    ]]; then a="s390x"   ; fi;

    if [[ $arch == $a ]]; then match="1"; fi
  done

  if [[ $match == "1" ]]; then return 0; else return 1; fi;
}

function validateAdjustImageTag(){
  ## Pre-Checks for Parameter
  if ( [[ $PGM_MODE == "$NORMAL_MODE" ]] || [[ $PGM_MODE == "$SOURCE_MODE" ]] ) && [[ $(basename $SOURCE_IMAGE | grep ":" | wc -l) -eq "0" ]]; then
    echo "NOTICE: It looks like you did not specify a tag on source file. Asume 'latest' as tag."
    SOURCE_IMAGE="$SOURCE_IMAGE:latest"
  fi

  if ( [[ $PGM_MODE == "$NORMAL_MODE" ]] || [[ $PGM_MODE == "$TARGET_MODE" ]] ) && [[ $(basename $TARGET_IMAGE | grep ":" | wc -l) -eq "0" ]]; then
    echo "NOTICE: It looks like you did not specify a tag on target file. Asume 'latest' as tag."
    TARGET_IMAGE="$TARGET_IMAGE:latest"
  fi
}

function checkAndGetNrOfManifestsInManifestList(){
  # Check for Manifests in Image
  NR_OF_MANIFESTS=$(docker manifest inspect $SOURCE_IMAGE | jq '.manifests | length') > /dev/null 2>&1

  re='^[0-9]+$'
  if ! [[ $NR_OF_MANIFESTS =~ $re ]] ; then
    echo "It looks like the Source Docker-Image is not suitable for this action."
    echo "It either does not exist or there was an error checking the provided Image."
    exit 1
  fi

  if [ $NR_OF_MANIFESTS -eq 0 ]; then
    echo "It looks like the Source Docker-Image is not suitable for this action."
    echo "Please provide an existing multi architecture image. You can only copy existing multi-arch images!"
    exit 1
  fi
}


function checkImageIsDocker(){
  # Check if source images are Docker Images or Images from a custom repository
  docker_creds=$(cat ~/.docker/config.json | jq ".auths | keys" | grep -v "\[" | grep -v "\]" | tr -d ' ' | tr -d ',' | tr -d '"' | sed 's/https:\/\///g' | cut -d'/' -f1)

  docker manifest inspect "docker.io/"$SOURCE_IMAGE > /dev/null 2>&1
  SOURCE_IS_DOCKER=$(test $? -eq 0 && echo "1" || echo "0")
  docker manifest inspect "docker.io/"$TARGET_IMAGE > /dev/null 2>&1
  TARGET_IS_DOCKER=$(test $? -eq 0 && echo "1" || echo "0")

  if [[ $SOURCE_IS_DOCKER = "1" ]] && [[ $(echo $SOURCE_IMAGE | grep "docker.io" | wc -l) == "0" ]]; then
    SOURCE_IMAGE="docker.io/"$SOURCE_IMAGE
  fi
  if [[ $TARGET_IS_DOCKER = "1" ]] && [[ $(echo $TARGET_IMAGE | grep "docker.io" | wc -l) == "0" ]]; then
    TARGET_IMAGE="docker.io/"$TARGET_IMAGE
  fi
}


function checkExistingCredentials(){
  # Check if we do have credentials for source and target repository
  SOURCE_CREDS=0
  for cred in $docker_creds;
  do
    if [[ $SOURCE_IMAGE  =~ .*$cred.* ]] || [[ $cred =~ .*docker\.io.* ]]; then
      SOURCE_CREDS=1
      break;
    fi
  done;

  TARGET_CREDS=0
  for cred in $docker_creds;
  do
    if [[ $TARGET_IMAGE =~ .*$cred.* ]] || [[ $SOURCE_IMAGE =~ .*docker\.io.* ]]; then
      TARGET_CREDS=1
      break;
    fi
  done;
}


function loginToRepositories(){
  # Validate checks for Repo-Images
  if [[ $SOURCE_CREDS == 0 ]]; then
    echo "WARNING: There are no credentials to login to source repository, you may need to login to access the repo."
  fi
  if [[ $TARGET_CREDS == 0 ]]; then
    echo "WARNING: There are no credentials to login to target repository, you may need to login to write to the repo."
  fi

  if [[ ! -z $SOURCE_USER ]]; then
    echo "Try to login to Source repository with provided information..."
    if [[ -z $SOURCE_PASSWORD ]]; then
      read -s -p "Please enter password for Source Repository:" SOURCE_PASSWORD
    fi
    SOURCE_SERVER=$(echo $SOURCE_IMAGE | cut -d'/' -f1)
    docker login $SOURCE_SERVER --username $SOURCE_USER --password $SOURCE_PASSWORD > /dev/null 2>&1
    if [[ ! $? -eq 0 ]]; then
      echo " "
      echo "Login to Source Repository was not successful, leaving..."
      exit 1
    else
      echo "No login possible with this user/password combination to $SOURCE_SERVER"
      echo "You may want to login with your credentials manually before passing user/password to this program to be sure, that your login works."
      echo "You do not need to specify credentials here, when you have already logged in with 'docker login'"
    fi
  fi;

  if [[ ! -z $TARGET_USER ]]; then
    echo "Try to login to Target repository with provided information..."
    if [[ -z $TARGET_PASSWORD ]]; then
      read -s -p "Please enter password for Target Repository:" TARGET_PASSWORD
    fi
    TARGET_SERVER=$(echo $TARGET_IMAGE | cut -d'/' -f1)
    docker login $TARGET_SERVER --username $TARGET_USER --password $TARGET_PASSWORD > /dev/null 2>&1
    if [[ ! $? -eq 0 ]]; then
      echo " "
      echo "Login to Target Repository was not successful, leaving..."
      exit 1
    else
      echo "No login possible with this user/password combination to $TARGET_SERVER"
      echo "You may want to login with your credentials manually before passing user/password to this program to be sure, that your login works."
      echo "You do not need to specify credentials here, when you have already logged in with 'docker login'"
    fi
  fi;
}



function prepareSingleImage(){
   local isImage="0"
   local isOci="0"

   if [[ $(echo $arg | grep -E "^type=image,path=.*,arch=.*$" | wc -l) -eq "1" ]]; then isImage="1"; fi
   if [[ $(echo $arg | grep -E "^type=oci,name=.*,path=.*,arch=.*$" | wc -l) -eq "1" ]]; then isOci="1"; fi

   if [[ "$isImage" == "0" ]] && [[ "$isOci" == "0" ]]; then
     echo "ERROR: Specified single image definition is not valid. Please enter a specification string to address image in this form:"
     echo '     --merge-push "type=(oci|image),path=<(repository_path>|<path_to_tar.gz>),arch=<arch_of_single-image>"'
     echo "     "
     echo ' Example: pma2docker --merge-push "type=image,dobernoeder/helloworld:latest,arch=amd64" dobernoeder/newworld:latest-amd64'
     echo "     "
     exit 1
   fi

   if [[ "$isImage" -eq "1" ]]; then
     ARR_SI_TYPE+=("$(echo $arg | cut -d',' -f1 | cut -d'=' -f2 )")
     ARR_SI_NAME+=("$(echo $arg | cut -d',' -f2 | cut -d'=' -f2 )")
     ARR_SI_PATH+=("$(echo $arg | cut -d',' -f2 | cut -d'=' -f2 )")
     ARR_SI_ARCH+=("$(echo $arg | cut -d',' -f3 | cut -d'=' -f2 )")
   fi;

   if [[ "$isOci" -eq "1" ]]; then
     ARR_SI_TYPE+=("$(echo $arg | cut -d',' -f1 | cut -d'=' -f2 )")
     ARR_SI_NAME+=("$(echo $arg | cut -d',' -f2 | cut -d'=' -f2 )")
     ARR_SI_PATH+=("$(echo $arg | cut -d',' -f3 | cut -d'=' -f2 )")
     ARR_SI_ARCH+=("$(echo $arg | cut -d',' -f4 | cut -d'=' -f2 )")
   fi;
}

function tagImage(){
   docker tag "$1" "$2"
   if [[ $? -eq 0 ]]; then
     echo "Tagged Image from $1 to $2"
     DEL_IMAGES="$DEL_IMAGES"" ""$2"
   else
     echo "Unable to tag new image for architecture $arch. Abort process..."
    exit 1
   fi
}

function checkImportFile(){
  local importFile=$1

  # Check if extract path exists when --extract was set
  if [ ! -d $importFile ]; then
    echo "ERROR: You specified an image file for import. The Image does not exist. You must specify an valid, existing directory as a *.tar.gz which is compliant to oci specification."
    exit 1
  fi
}

function importImage(){
  echo "Load Image $1 from $2"
  docker import "$2" "$1"
  if [[ ! $? -eq 0 ]]; then echo "ERROR: Was not able to import image $1 from file $2. Please make sure, that the import file is a *.tar.gz valid to the oci specification."; exit 1; fi;
}

function pullImage(){
  docker pull "$1"
  if [[ ! $? -eq 0 ]]; then echo "Unable to pull image for architecture $arch. Abort process..."; exit 1; fi
  DEL_IMAGES="$DEL_IMAGES"" ""$1"
}

function pushImage(){
  echo "Pushing Image to docker ..."
  docker push "$1"
  if [[ ! $? -eq 0 ]]; then echo "Unable to push $1. Abort process..."; exit 1; fi
}

function pushManifest(){
  echo "Pushing Manifest to Docker"
  docker manifest push "$1"
  if [[ ! $? -eq 0 ]]; then echo "Unable to push Manifest for $1. Abort process..."; exit 1; fi
}

function saveImage(){
  echo "Saving image file to $EXTRACT_PATH/image-$arch.tar.gz ..."
  docker save -o $EXTRACT_PATH"/image-$arch.tar.gz" "$1"
}

function createMultiArchImage(){
  local image="$1"
  local platforms="$2"

  check=$(docker manifest inspect "$image")

  if [ $? -eq "0" ]; then
    docker manifest rm "$image"  2>/dev/null
  fi
  docker manifest create $image $platforms
  if [[ ! $? -eq 0 ]]; then echo "Unable to create manifest for multi-arch image. Abort process..."; exit 1; fi
  DEL_MANIFESTS="$DEL_MANIFESTS"" ""$1"
}

function analyzeSourceManifest(){
  # Get Information for Manifest
  manifest=$(docker manifest inspect $SOURCE_IMAGE | jq '.manifests'["${c}"])
  digest=$(echo $manifest | jq -r '.digest')
  arch=$(echo $manifest | jq -r '.platform.architecture')

  # Check if we have a variant for an architecture, for example arm/v7
  if [[ $(echo $manifest | jq -r '.platform.variant') != "null" ]]; then
    arch="$arch"$(echo $manifest | jq -r '.platform.variant')
  fi
}

function getSingleImages(){

  for (( i=0; i<${#ARR_SI_PATH[@]}; i++ ));
  do
    if [[ ${ARR_SI_TYPE[$i]} == "image" ]]; then
      pullImage "${ARR_SI_PATH[$i]}"
    elif [[ ${ARR_SI_TYPE[$i]} == "oci" ]]; then
      importImage "${ARR_SI_NAME[$i]}" "${ARR_SI_PATH[$i]}"
    else
     echo "ERROR: Internal process error due to invalid type specification for single image no. $i"
     exit 1
    fi
    LIST_OF_PLATFORM_IMAGES="$LIST_OF_PLATFORM_IMAGES"" "${ARR_SI_PATH[$i]}
  done
}

function copyMultiArchToLocal(){
  # Cycle through all Manifests in the manifest of the Manifest-List
  for (( c=0; c<$NR_OF_MANIFESTS; c++ ));
  do
    analyzeSourceManifest
    PLATFORM_TARGET_IMAGE="$TARGET_IMAGE""-""$arch"
    if [ ! -z "$arch" ] && [ ! -z "$digest" ] && ( validateArch || [ -z "$LIST_OF_ARCHS" ] ); then
      echo " $arch ---------------------------------------------------------------------------------------"
      pullImage "$SOURCE_IMAGE""@""$digest"
      tagImage  "$SOURCE_IMAGE""@""$digest" "$PLATFORM_TARGET_IMAGE"
      if [[ $ONLY_PULL_SPLIT == "0" ]] && [[ -z $EXTRACT_PATH ]]; then
        pushImage "$PLATFORM_TARGET_IMAGE"
      fi
      if [[ ! -z $EXTRACT_PATH ]]; then
        echo "Saving image file to $EXTRACT_PATH/image-$arch.tar.gz ..."
        saveImage "$PLATFORM_TARGET_IMAGE"
      fi;
      LIST_OF_PLATFORM_IMAGES="$LIST_OF_PLATFORM_IMAGES"" ""$PLATFORM_TARGET_IMAGE"
    fi;

    # Reset values for $arch and $digest
    arch=""
    digest=""
  done;
}

function multiArchUpload(){
  # Check for existing manifest and delete it before creating new one, if Multi-Arch-Push is not deactivated
  echo " MULTI-ARCH Creation & Upload --------------------------------------------------------------------"
  if [[ "$ONLY_SINGLE_IMAGES" -eq "0" ]] && [[ "$ONLY_PULL_SPLIT" -eq "0" ]]; then
    createMultiArchImage $TARGET_IMAGE $LIST_OF_PLATFORM_IMAGES
    if [[ -z $EXTRACT_PATH ]]; then
      pushManifest "$TARGET_IMAGE" "'""$LIST_OF_PLATFORM_IMAGES""'"
    fi;
  else
    echo " --> SKIP Multi-Architecture Creation & Upload due to Parameter --only-single-images or --pull-split is set"
    if [[ ! -z $EXTRACT_PATH ]]; then
      echo " WARNING: Export of multi architecture images to files is currently not supported. The option --only-single-images is activated automatically when setting --extract parameter!"
    fi
  fi;
}

function cleanup(){
  echo "Delete Manifests..."
  docker manifest rm $DEL_MANIFESTS 2>/dev/null
  echo "Delete Images..."
  docker image rm $DEL_IMAGES
}


## START OF PROCESS ##
dependencyCheck

# Parameter handling
cnt=0
for arg in "$@"; do
  cnt=$(( $cnt+1 ))
  if [[ "$arg" == "--version" ]];                 then setPgmMode $INFO_MODE;                     version; exit; fi;
  if [[ "$arg" == "--help" ]];                    then setPgmMode $INFO_MODE;                     usage;   exit; fi;
  if [[ "$arg" == "--source-user" ]];             then setPgmMode $(($NORMAL_MODE+$SOURCE_MODE)); NEXT_ITEM="--source-user"; continue; fi;
  if [[ "$arg" == "--source-password" ]];         then setPgmMode $(($NORMAL_MODE+$SOURCE_MODE)); NEXT_ITEM="--source-password"; continue; fi;
  if [[ "$arg" == "--target-user" ]];             then setPgmMode $(($NORMAL_MODE+$TARGET_MODE)); NEXT_ITEM="--target-user"; continue; fi;
  if [[ "$arg" == "--target-password" ]];         then setPgmMode $(($NORMAL_MODE+$TARGET_MODE)); NEXT_ITEM="--target-password"; continue; fi;
  if [[ "$arg" == "--pull-split" ]] \
  || [[ "$arg" == "-p" ]];                        then setPgmMode $SOURCE_MODE; ONLY_PULL_SPLIT=1; continue; fi;
  if [[ "$arg" == "--only-single-images" ]] \
  || [[ "$arg" == "-s" ]];                        then setPgmMode $(($NORMAL_MODE+$TARGET_MODE)); ONLY_SINGLE_IMAGES=1; continue; fi;
  if [[ "$arg" == "--only-arch" ]] \
  || [[ "$arg" == "-a" ]];                        then setPgmMode $(($NORMAL_MODE+$SOURCE_MODE)); NEXT_ITEM="--only-arch"; continue; fi;
  if [[ "$arg" == "--extract" ]] \
  || [[ "$arg" == "-e" ]];                        then setPgmMode $SOURCE_MODE; NEXT_ITEM="--extract"; continue; fi;
  if [[ "$arg" == "--merge-push" ]] \
  || [[ "$arg" == "-m" ]];                        then setPgmMode $TARGET_MODE; NEXT_ITEM="--merge-push"; continue; fi;
  if [[ "$arg" == "--cleanup" ]] \
  || [[ "$arg" == "-c" ]];                        then setPgmMode $(($NORMAL_MODE+$SOURCE_MODE+$TARGET_MODE)); CLEANUP=1; continue; fi;
  if [[ $cnt -le $(( "$PARM_CNT" - $NON_FLAG_CNT )) ]]; then
    if [[ "$NEXT_ITEM" == "--source-user" ]];       then SOURCE_USER="$arg"; NEXT_ITEM=""; continue; fi
    if [[ "$NEXT_ITEM" == "--source-password" ]];   then SOURCE_PASSWORD="$arg"; NEXT_ITEM=""; continue; fi
    if [[ "$NEXT_ITEM" == "--target-user" ]];       then TARGET_USER="$arg"; NEXT_ITEM=""; continue; fi
    if [[ "$NEXT_ITEM" == "--target-password" ]];   then TARGET_PASSWORD="$arg"; NEXT_ITEM=""; continue; fi
    if [[ "$NEXT_ITEM" == "--only-arch" ]];         then LIST_OF_ARCHS="$arg"; NEXT_ITEM=""; continue; fi
    if [[ "$NEXT_ITEM" == "--extract" ]];           then EXTRACT_PATH="$arg"; ONLY_SINGLE_IMAGES=1; NEXT_ITEM=""; continue; fi
    if [[ "$NEXT_ITEM" == "--merge-push" ]];        then prepareSingleImage; NEXT_ITEM=""; continue; fi
  fi
  if [[ "$PGM_MODE" == "$NOT_INITIALIZED_MODE" ]]; then PGM_MODE=$NORMAL_MODE; fi;  # If not initialized by Flag-Parameter, set to Normal mode
  if [[ "$PGM_MODE" == "$NORMAL_MODE" ]]; then
    if [[ "$cnt" == $(( "$PARM_CNT" -1 )) ]];              then SOURCE_IMAGE="$arg"; continue; fi;
    if [[ "$cnt" == $(( "$PARM_CNT" -0 )) ]];              then TARGET_IMAGE="$arg"; continue; fi;
  fi
  if [[ "$PGM_MODE" == "$TARGET_MODE" ]]; then
    if [[ "$cnt" == $(( "$PARM_CNT" -0 )) ]];              then TARGET_IMAGE="$arg"; continue; fi;
  fi
  if [[ "$PGM_MODE" == "$SOURCE_MODE" ]]; then
    if [[ "$cnt" == $(( "$PARM_CNT" -0 )) ]];              then SOURCE_IMAGE="$arg"; continue; fi;
  fi
  echo "Unknown parameter: $arg"
  echo " "
  usage
  exit 1
done

if [[ "$PGM_MODE" = "$TARGET_MODE" ]]; then
  # When --merge-push is specified do special download handling
  checkImageIsDocker
  getSingleImages
  tagImage ${ARR_SI_PATH[0]} $TARGET_IMAGE
  pushImage $TARGET_IMAGE
  createMultiArchImage $TARGET_IMAGE "$LIST_OF_PLATFORM_IMAGES"
  pushManifest $TARGET_IMAGE
  if [[ $CLEANUP == "1" ]]; then
    cleanup
  fi
  exit 0
fi

if [[ "$PGM_MODE" = "$NORMAL_MODE" ]]; then
  # Normal Mode: Download Multi-Arch-Image and Copy it to another Repo
  validateAdjustImageTag
  checkAndGetNrOfManifestsInManifestList
  checkImageIsDocker
  checkExistingCredentials
  loginToRepositories
  copyMultiArchToLocal
  multiArchUpload
  if [[ $CLEANUP == "1" ]]; then
    cleanup
  fi
  exit 0
fi

# Additional parameter inspection and handling
if [[ "$PGM_MODE" = "$SOURCE_MODE" ]]; then
  if [[ $ONLY_PULL_SPLIT == "1" ]] || [[ ! -z $EXTRACT_PATH ]]; then
    if [ ! -z $TARGET_USER ] || [ ! -z $TARGET_PASSWORD ]; then
      echo "WARNING: --target-user and --target-password are not applicable with --pull-split and will be ignored!"
      TARGET_USER=""
      TARGET_PASSWORD=""
    fi
  fi;

  # Check if extract path exists when --extract was set
  if [ ! -d $EXTRACT_PATH ]; then
    echo "ERROR: You specified the --extract option to save an image to a file. You must specify an valid, existing directory to export the *.tar.gz"
    exit 1
  fi

  validateAdjustImageTag
  checkAndGetNrOfManifestsInManifestList
  checkImageIsDocker
  checkExistingCredentials
  loginToRepositories
  copyMultiArchToLocal
  if [[ $CLEANUP == "1" ]]; then
    cleanup
  fi
  exit 0

fi

# if only one paramter was added, this cannot run properly, prompt usage dialog and end
if [[ -z $SOURCE_IMAGE ]] || [[ -z $TARGET_IMAGE ]]; then
  echo "ERROR: Invalid parameter combination"
  usage
  exit 1
fi
