#!/bin/bash

VERSION=1.1.0
ONLY_SINGLE_IMAGES=0
SOURCE_IMAGE=""
TARGET_IMAGE=""
SOURCE_SERVER=""
SOURCE_USER=""
SOURCE_PASSWORD=""
TARGET_SERVER=""
TARGET_USER=""
TARGET_PASSWORD=""
LIST_OF_PLATFORM_IMAGES=""
NR_OF_MANIFESTS=""

function usage(){
  echo "Usage: pma2docker [options...] <SOURCE_IMAGE> <DOCKER_TARGET_IMAGE_WITH_TAG>"
  echo " "
  echo "Options:"
  echo "  -s, --only-single-images  - Push only the single images with prefix, e.g. *-amd64, *-arm64, *-armv7"
  echo "      --source-user         - Username for Login at Source Repository"
  echo "      --source-password     - Password for Login at Source Repository"
  echo "      --target-user         - Username for Login at Target Repository"
  echo "      --target-password     - Password for Login at Target Repository"
  echo "      --help                - Show this info"
  echo "      --versoin             - Show the version of this script"
}

function version(){
  echo "pma2docker v.$VERSION"
}

cnt=0
for arg in "$@"; do
  cnt=$(( $cnt+1 ))
  if [[ "$SKIP_ITEM" == "1" ]]; then SKIP_ITEM="0"; continue; fi
  if [[ "$arg" == "--version" ]]; then version; exit; fi;
  if [[ "$arg" == "--help" ]];    then usage;   exit; fi;
  if [[ "$arg" == "--only-single-images" ]] || [[ "$arg" == "-s" ]]; then ONLY_SINGLE_IMAGES=1; continue; fi;
  if [[ "$arg" == "--source-user" ]]; then SOURCE_USER="$arg"; SKIP_ITEM="1"; continue; fi;
  if [[ "$arg" == "--source-password" ]]; then SOURCE_PASSWORD="$arg"; SKIP_ITEM="1"; continue; fi;
  if [[ "$arg" == "--target-user" ]]; then TARGET_USER="$arg"; SKIP_ITEM="1"; continue; fi;
  if [[ "$arg" == "--target-password" ]]; then TARGET_PASSWORD="$arg"; SKIP_ITEM="1"; continue; fi;
  if [[ "$cnt" == $(( "$#" -1 )) ]]; then SOURCE_IMAGE="$arg"; continue; fi;
  if [[ "$cnt" == $(( "$#" -0 )) ]]; then TARGET_IMAGE="$arg"; continue; fi;
  echo "Unknown parameter: $arg"
  echo " "
  usage
  exit 1
done

if [ $# -lt 2 ]; then
  usage
  exit 1
fi


## Pre-Checks for Parameter
if [ $(basename $SOURCE_IMAGE | grep ":" | wc -l) -eq "0" ]; then
  echo "NOTICE: It looks like you did not specify a tag on source file. Asume 'latest' as tag."
  SOURCE_IMAGE="$SOURCE_IMAGE:latest"
fi

if [ $(basename $TARGET_IMAGE | grep ":" | wc -l) -eq "0" ]; then
  echo "NOTICE: It looks like you did not specify a tag on target file. Asume 'latest' as tag."
  TARGET_IMAGE="$TARGET_IMAGE:latest"
fi


# Check for Manifests in Image
NR_OF_MANIFESTS=$(docker manifest inspect $SOURCE_IMAGE | jq '.manifests | length')

re='^[0-9]+$'
if ! [[ $NR_OF_MANIFESTS =~ $re ]] ; then
  echo "It looks like the Source Docker-Image is not suitable for this action."
  echo "It either does not exist or there was an error checking the provided Image."
  exit 1
fi

if [ $NR_OF_MANIFESTS -eq 0 ]; then
  echo "It looks like the Source Docker-Image is not suitable for this action."
  echo "Please provide an existing multi architecture image. You can only copy existing multi-arch images!"
  exit 1
fi


# Check if source images are Docker Images or Images from a custom repository
docker_creds=$(cat ~/.docker/config.json | jq ".auths | keys" | grep -v "\[" | grep -v "\]" | tr -d ' ' | tr -d ',' | tr -d '"' | sed 's/https:\/\///g' | cut -d'/' -f1)

docker manifest inspect "docker.io/"$SOURCE_IMAGE > /dev/null 2>&1
SOURCE_IS_DOCKER=$(test $? -eq 0 && echo "1" || echo "0")
docker manifest inspect "docker.io/"$TARGET_IMAGE > /dev/null 2>&1
TARGET_IS_DOCKER=$(test $? -eq 0 && echo "1" || echo "0")


if [[ $SOURCE_IS_DOCKER = "1" ]] && [[ $(echo $SOURCE_IMAGE | grep "docker.io" | wc -l) == "0" ]]; then
  SOURCE_IMAGE="docker.io/"$SOURCE_IMAGE
fi
if [[ $TARGET_IS_DOCKER = "1" ]] && [[ $(echo $TARGET_IMAGE | grep "docker.io" | wc -l) == "0" ]]; then
  TARGET_IMAGE="docker.io/"$TARGET_IMAGE
fi


SOURCE_CREDS=0
for cred in $docker_creds;
do
  if [[ $SOURCE_IMAGE  =~ .*$cred.* ]] || [[ $cred =~ .*docker\.io.* ]]; then
    SOURCE_CREDS=1
    break;
  fi
done;

TARGET_CREDS=0
for cred in $docker_creds;
do
  if [[ $TARGET_IMAGE =~ .*$cred.* ]] || [[ $SOURCE_IMAGE =~ .*docker\.io.* ]]; then
    TARGET_CREDS=1
    break;
  fi
done;

# Validate checks for Repo-Images
if [[ $SOURCE_CREDS == 0 ]]; then
  echo "WARNING: There are no credentials to login to source repository, you may need to login to access the repo."
fi
if [[ $TARGET_CREDS == 0 ]]; then
  echo "WARNING: There are no credentials to login to target repository, you may need to login to write to the repo."
fi

if [[ ! -z $SOURCE_USER ]]; then
  echo "Try to login to Source repository with provided information..."
  if [[ -z $SOURCE_PASSWORD ]]; then
    read -s -p "Please enter password for Source Repository:" SOURCE_PASSWORD
  fi
  SOURCE_SERVER=$(echo $SOURCE_IMAGE | cut -d'/' -f1)
  docker login $SOURCE_SERVER
fi;

if [[ ! -z $TARGET_USER ]]; then
  echo "Try to login to Target repository with provided information..."
  if [[ -z $TARGET_PASSWORD ]]; then
    read -s -p "Please enter password for Target Repository:" TARGET_PASSWORD
  fi
  TARGET_SERVER=$(echo $TARGET_IMAGE | cut -d'/' -f1)
  docker login $TARGET_SERVER
fi;



# Cycle through all Manifests in the manifest of the Manifest-List
for (( c=0; c<$NR_OF_MANIFESTS; c++ ));
do
  # Get Information for Manifest
  manifest=$(docker manifest inspect $SOURCE_IMAGE | jq '.manifests'["${c}"])
  digest=$(echo $manifest | jq -r '.digest')
  arch=$(echo $manifest | jq -r '.platform.architecture')

  # Check if we have a variant for an architecture, for example arm/v7
  if [ $(echo $manifest | jq -r '.platform.variant') != "null" ]; then
    arch="$arch"$(echo $manifest | jq -r '.platform.variant')
  fi

  PLATFORM_TARGET_IMAGE="$TARGET_IMAGE""-""$arch"
  if [ ! -z "$arch" ] && [ ! -z "$digest" ]; then
    echo " $arch ---------------------------------------------------------------------------------------"
    docker pull "$SOURCE_IMAGE""@""$digest"
    docker tag  "$SOURCE_IMAGE""@""$digest" "$PLATFORM_TARGET_IMAGE"
    docker push "$PLATFORM_TARGET_IMAGE"
    LIST_OF_PLATFORM_IMAGES="$LIST_OF_PLATFORM_IMAGES"" ""$PLATFORM_TARGET_IMAGE"
  fi;

  # Reset values for $arch and $digest
  arch=""
  digest=""
done;

# Check for existing manifest and delete it before creating new one, if Multi-Arch-Push is not deactivated
echo " MULTI-ARCH Creation & Upload --------------------------------------------------------------------"
if [[ "$ONLY_SINGLE_IMAGES" -eq "0" ]]; then
  check=$(docker manifest inspect "$TARGET_IMAGE")

  if [ $? -eq "0" ]; then
    docker manifest rm "$TARGET_IMAGE"  2>/dev/null
  fi

  docker manifest create $TARGET_IMAGE $LIST_OF_PLATFORM_IMAGES

  echo "Pushing Image to docker ..."
  docker manifest push "$TARGET_IMAGE"
else
  echo " --> SKIP Multi-Architecture Upload due to Parameter --only-single-images"
fi;
