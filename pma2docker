#!/bin/bash

VERSION=1.1.0
ONLY_SINGLE_IMAGES=0
ONLY_PULL_SPLIT=0
SOURCE_IMAGE=""
TARGET_IMAGE=""
SOURCE_SERVER=""
SOURCE_USER=""
SOURCE_PASSWORD=""
TARGET_SERVER=""
TARGET_USER=""
TARGET_PASSWORD=""
LIST_OF_PLATFORM_IMAGES=""
NR_OF_MANIFESTS=""

function usage(){
  echo "Usage: pma2docker [options...] <SOURCE_IMAGE> <DOCKER_TARGET_IMAGE_WITH_TAG>"
  echo " "
  echo "Options:"
  echo "  -s, --only-single-images  - Push only the single images with suffix, e.g. *-amd64, *-arm64, *-armv7"
  echo "  -p, --pull-split          - Only download the image from Source Repository and add suffix without pushing it somewhere"
  echo "      --source-user         - Username for Login at Source Repository"
  echo "      --source-password     - Password for Login at Source Repository"
  echo "      --target-user         - Username for Login at Target Repository"
  echo "      --target-password     - Password for Login at Target Repository"
  echo "      --help                - Show this info"
  echo "      --versoin             - Show the version of this script"
}

function version(){
  echo "pma2docker v.$VERSION"
}

function dependencyCheck(){
  # Check installed tools: bash, jq, docker
  bash --version > /dev/null 2>&1 || { echo "ERROR: Dependency 'bash' is not installed. Please make sure that 'bash' ist installed and configured properly"; exit 1; }
  jq --version > /dev/null 2>&1 || { echo "ERROR: Dependency 'jq' is not installed. Please make sure that 'jq' ist installed and configured properly"; exit 1; }
  docker --version > /dev/null 2>&1 || { echo "ERROR: Dependency 'docker' is not installed. Please make sure that 'docker' ist installed and configured properly"; exit 1; }

  # Check if command docker manifest is available
  [ $(docker manifest --help | grep "docker manifest COMMAND --help" | wc -l) -ge "1" ] || { echo "It loooks like there is noch command 'docker manifest' available on the system. Please verify, if you can run 'docker manifest --help' successfully on the system. You may need to enable docker's experimental client features!"; exit 1; }

  # Check if command docker buildx is available
  docker_server_start=$(docker info | grep -En "^Server" | cut -d':' -f1)
  client_plugins=$(docker info | head -n $(( $docker_server_start - 2)) | grep -A 100 'Plugins' | grep -v "Plugins" | awk '{ print; $1 }' | tr -d ' ' | cut -d':' -f1)

  BUILDX_ENABLED="0"
  for plugin in $client_plugins
  do
    if [[ "$plugin" = "buildx" ]]; then
      BUILDX_ENABLED="1"
    fi
  done;

  if [[ "$BUILDX_ENABLED" = "0" ]]; then
    echo "ERROR: Docker Plugin 'buildx' is needed to create multiarchitectural images. You can find neccessary information here: https://docs.docker.com/buildx/working-with-buildx/"
    exit 1
  fi
}

dependencyCheck

cnt=0
NON_FLAG_CNT=2
for arg in "$@"; do
  cnt=$(( $cnt+1 ))
  if [[ "$arg" == "--version" ]];                 then version; exit; fi;
  if [[ "$arg" == "--help" ]];                    then usage;   exit; fi;
  if [[ "$arg" == "--only-single-images" ]] \
  || [[ "$arg" == "-s" ]];                        then ONLY_SINGLE_IMAGES=1; continue; fi;
  if [[ "$arg" == "--source-user" ]];             then NEXT_ITEM="--source-user"; continue; fi;
  if [[ "$arg" == "--source-password" ]];         then NEXT_ITEM="--source-password"; continue; fi;
  if [[ "$arg" == "--target-user" ]];             then NEXT_ITEM="--target-user"; continue; fi;
  if [[ "$arg" == "--target-password" ]];         then NEXT_ITEM="--target-password"; continue; fi;
  if [[ "$arg" == "--pull-split" ]] \
  || [[ "$arg" == "-p" ]];                        then ONLY_PULL_SPLIT=1; NON_FLAG_CNT=1; continue; fi;
  if [[ "$cnt" == $(( "$#" -1 )) ]] && \
     [[ "$NON_FLAG_CNT" == "2" ]];                then SOURCE_IMAGE="$arg"; continue; fi;
  if [[ "$cnt" == $(( "$#" -0 )) ]] && \
     [[ "$NON_FLAG_CNT" == "2" ]];                then TARGET_IMAGE="$arg"; continue; fi;
  if [[ "$cnt" == $(( "$#" -0 )) ]] && \
     [[ "$NON_FLAG_CNT" == "1" ]];                then SOURCE_IMAGE="$arg"; continue; fi;
  if [[ "$NEXT_ITEM" == "--source-user" ]];       then SOURCE_USER="$arg"; NEXT_ITEM=""; continue; fi
  if [[ "$NEXT_ITEM" == "--source-password" ]];   then SOURCE_PASSWORD="$arg"; NEXT_ITEM=""; continue; fi
  if [[ "$NEXT_ITEM" == "--target-user" ]];       then TARGET_USER="$arg"; NEXT_ITEM=""; continue; fi
  if [[ "$NEXT_ITEM" == "--target-password" ]];   then TARGET_PASSWORD="$arg"; NEXT_ITEM=""; continue; fi
  echo "Unknown parameter: $arg"
  echo " "
  usage
  exit 1
done

# Additional parameter inspection and handling
if [[ $ONLY_PULL_SPLIT == "1" ]]; then
  TARGET_IMAGE=$SOURCE_IMAGE
  if [ ! -z $TARGET_USER ] || [ ! -z $TARGET_PASSWORD ]; then
    echo "WARNING: --target-user and --target-password are not applicable with --pull-split and will be ignored!"
    TARGET_USER=""
    TARGET_PASSWORD=""
  fi
fi;


if [ $# -lt 2 ]; then
  usage
  exit 1
fi


## Pre-Checks for Parameter
if [ $(basename $SOURCE_IMAGE | grep ":" | wc -l) -eq "0" ]; then
  echo "NOTICE: It looks like you did not specify a tag on source file. Asume 'latest' as tag."
  SOURCE_IMAGE="$SOURCE_IMAGE:latest"
fi

if [ $(basename $TARGET_IMAGE | grep ":" | wc -l) -eq "0" ]; then
  echo "NOTICE: It looks like you did not specify a tag on target file. Asume 'latest' as tag."
  TARGET_IMAGE="$TARGET_IMAGE:latest"
fi


# Check for Manifests in Image
NR_OF_MANIFESTS=$(docker manifest inspect $SOURCE_IMAGE | jq '.manifests | length')

re='^[0-9]+$'
if ! [[ $NR_OF_MANIFESTS =~ $re ]] ; then
  echo "It looks like the Source Docker-Image is not suitable for this action."
  echo "It either does not exist or there was an error checking the provided Image."
  exit 1
fi

if [ $NR_OF_MANIFESTS -eq 0 ]; then
  echo "It looks like the Source Docker-Image is not suitable for this action."
  echo "Please provide an existing multi architecture image. You can only copy existing multi-arch images!"
  exit 1
fi


# Check if source images are Docker Images or Images from a custom repository
docker_creds=$(cat ~/.docker/config.json | jq ".auths | keys" | grep -v "\[" | grep -v "\]" | tr -d ' ' | tr -d ',' | tr -d '"' | sed 's/https:\/\///g' | cut -d'/' -f1)

docker manifest inspect "docker.io/"$SOURCE_IMAGE > /dev/null 2>&1
SOURCE_IS_DOCKER=$(test $? -eq 0 && echo "1" || echo "0")
docker manifest inspect "docker.io/"$TARGET_IMAGE > /dev/null 2>&1
TARGET_IS_DOCKER=$(test $? -eq 0 && echo "1" || echo "0")


if [[ $SOURCE_IS_DOCKER = "1" ]] && [[ $(echo $SOURCE_IMAGE | grep "docker.io" | wc -l) == "0" ]]; then
  SOURCE_IMAGE="docker.io/"$SOURCE_IMAGE
fi
if [[ $TARGET_IS_DOCKER = "1" ]] && [[ $(echo $TARGET_IMAGE | grep "docker.io" | wc -l) == "0" ]]; then
  TARGET_IMAGE="docker.io/"$TARGET_IMAGE
fi


SOURCE_CREDS=0
for cred in $docker_creds;
do
  if [[ $SOURCE_IMAGE  =~ .*$cred.* ]] || [[ $cred =~ .*docker\.io.* ]]; then
    SOURCE_CREDS=1
    break;
  fi
done;

TARGET_CREDS=0
for cred in $docker_creds;
do
  if [[ $TARGET_IMAGE =~ .*$cred.* ]] || [[ $SOURCE_IMAGE =~ .*docker\.io.* ]]; then
    TARGET_CREDS=1
    break;
  fi
done;

# Validate checks for Repo-Images
if [[ $SOURCE_CREDS == 0 ]]; then
  echo "WARNING: There are no credentials to login to source repository, you may need to login to access the repo."
fi
if [[ $TARGET_CREDS == 0 ]]; then
  echo "WARNING: There are no credentials to login to target repository, you may need to login to write to the repo."
fi

if [[ ! -z $SOURCE_USER ]]; then
  echo "Try to login to Source repository with provided information..."
  if [[ -z $SOURCE_PASSWORD ]]; then
    read -s -p "Please enter password for Source Repository:" SOURCE_PASSWORD
  fi
  SOURCE_SERVER=$(echo $SOURCE_IMAGE | cut -d'/' -f1)
  docker login $SOURCE_SERVER --username $SOURCE_USER --password $SOURCE_PASSWORD > /dev/null 2>&1
  if [[ ! $? -eq 0 ]]; then
    echo " "
    echo "Login to Source Repository was not successful, leaving..."
    exit 1
  else
    echo "No login possible with this user/password combination to $SOURCE_SERVER"
    echo "You may want to login with your credentials manually before passing user/password to this program to be sure, that your login works."
    echo "You do not need to specify credentials here, when you have already logged in with 'docker login'"
  fi
fi;

if [[ ! -z $TARGET_USER ]]; then
  echo "Try to login to Target repository with provided information..."
  if [[ -z $TARGET_PASSWORD ]]; then
    read -s -p "Please enter password for Target Repository:" TARGET_PASSWORD
  fi
  TARGET_SERVER=$(echo $TARGET_IMAGE | cut -d'/' -f1)
  docker login $TARGET_SERVER --username $TARGET_USER --password $TARGET_PASSWORD > /dev/null 2>&1
  if [[ ! $? -eq 0 ]]; then
    echo " "
    echo "Login to Target Repository was not successful, leaving..."
    exit 1
  else
    echo "No login possible with this user/password combination to $TARGET_SERVER"
    echo "You may want to login with your credentials manually before passing user/password to this program to be sure, that your login works."
    echo "You do not need to specify credentials here, when you have already logged in with 'docker login'"
  fi
fi;



# Cycle through all Manifests in the manifest of the Manifest-List
for (( c=0; c<$NR_OF_MANIFESTS; c++ ));
do
  # Get Information for Manifest
  manifest=$(docker manifest inspect $SOURCE_IMAGE | jq '.manifests'["${c}"])
  digest=$(echo $manifest | jq -r '.digest')
  arch=$(echo $manifest | jq -r '.platform.architecture')

  # Check if we have a variant for an architecture, for example arm/v7
  if [ $(echo $manifest | jq -r '.platform.variant') != "null" ]; then
    arch="$arch"$(echo $manifest | jq -r '.platform.variant')
  fi

  PLATFORM_TARGET_IMAGE="$TARGET_IMAGE""-""$arch"
  if [ ! -z "$arch" ] && [ ! -z "$digest" ]; then
    echo " $arch ---------------------------------------------------------------------------------------"
    docker pull "$SOURCE_IMAGE""@""$digest"
    if [[ ! $? -eq 0 ]]; then echo "Unable to pull image for architecture $arch. Abort process..."; exit 1; fi
    docker tag  "$SOURCE_IMAGE""@""$digest" "$PLATFORM_TARGET_IMAGE"
    if [[ ! $? -eq 0 ]]; then echo "Unable to tag new image for architecture $arch. Abort process..."; exit 1; fi
    if [[ $ONLY_PULL_SPLIT == "0" ]]; then
      docker push "$PLATFORM_TARGET_IMAGE"
      if [[ ! $? -eq 0 ]]; then echo "Unable to push image for architecture $arch. Abort process..."; exit 1; fi
    fi
    LIST_OF_PLATFORM_IMAGES="$LIST_OF_PLATFORM_IMAGES"" ""$PLATFORM_TARGET_IMAGE"
  fi;

  # Reset values for $arch and $digest
  arch=""
  digest=""
done;

# Check for existing manifest and delete it before creating new one, if Multi-Arch-Push is not deactivated
echo " MULTI-ARCH Creation & Upload --------------------------------------------------------------------"
if [[ "$ONLY_SINGLE_IMAGES" -eq "0" ]] && [[ "$ONLY_PULL_SPLIT" -eq "0" ]]; then
  check=$(docker manifest inspect "$TARGET_IMAGE")

  if [ $? -eq "0" ]; then
    docker manifest rm "$TARGET_IMAGE"  2>/dev/null
  fi

  docker manifest create $TARGET_IMAGE $LIST_OF_PLATFORM_IMAGES
  if [[ ! $? -eq 0 ]]; then echo "Unable to create manifest for multi-arch image. Abort process..."; exit 1; fi

  echo "Pushing Image to docker ..."
  docker manifest push "$TARGET_IMAGE"
  if [[ ! $? -eq 0 ]]; then echo "Unable to push multi-arch manifest. Abort process..."; exit 1; fi
else
  echo " --> SKIP Multi-Architecture Creation & Upload due to Parameter --only-single-images or --pull-split is set"
fi;
